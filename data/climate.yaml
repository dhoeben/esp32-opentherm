# -----------------------------------------------------------
# Unified Climate Entity — full control of heating
# -----------------------------------------------------------

- platform: thermostat
  name: "OpenTherm Heating"
  id: ch_climate
  sensor: ha_indoor_temp        # feedback sensor (linked via !secret indoor_entity)
  visual:
    min_temperature: 5
    max_temperature: 40
    temperature_step: 0.5

  min_heating_off_time: 30s
  min_heating_run_time: 30s
  min_idle_time: 30s

  # Presets
  preset:
    - name: away
      default_target_temperature_low: 10
    - name: eco
      default_target_temperature_low: 15
    - name: home
      default_target_temperature_low: 18
    - name: comfort
      default_target_temperature_low: 20

  default_preset: home

  # When heating is required
  heat_action:
    - lambda: |-
        auto ot = opentherm::OpenThermComponent::get_singleton();
        if (ot == nullptr) return;

        // Determine current preset
        auto preset_opt = id(ch_climate).preset;
        std::string preset_str = "home";
        if (preset_opt.has_value()) preset_str = to_string(preset_opt.value());

        float flow_target = 0.0f;

        // Equitherm for normal heating presets
        if (preset_str == "home" || preset_str == "comfort" || preset_str == "eco") {
          flow_target = opentherm::Equitherm::calculate_target_temp();
        } else if (preset_str == "away") {
          flow_target = 10.0f;  // antifreeze protection
        }

        uint16_t raw = static_cast<uint16_t>(flow_target * 256.0f);
        uint32_t frame = ot->build_request(opentherm::WRITE_DATA, 0x11, raw);
        ot->send_frame(frame);

        ESP_LOGI("otgw", "Heating ON | Preset: %s | Flow target: %.1f°C",
                 preset_str.c_str(), flow_target);

  # When heating is idle
  idle_action:
    - lambda: |-
        auto ot = opentherm::OpenThermComponent::get_singleton();
        if (ot == nullptr) return;

        auto preset_opt = id(ch_climate).preset;
        std::string preset_str = "home";
        if (preset_opt.has_value()) preset_str = to_string(preset_opt.value());

        // Default: stop boiler completely
        float flow_target = 10.0f;

        // Only comfort mode keeps pipes slightly warm
        if (preset_str == "comfort") {
          flow_target = 15.0f;
        }

        uint16_t raw = static_cast<uint16_t>(flow_target * 256.0f);
        uint32_t frame = ot->build_request(opentherm::WRITE_DATA, 0x11, raw);
        ot->send_frame(frame);

        ESP_LOGI("otgw", "Heating OFF | Preset: %s | Flow target: %.1f°C",
                 preset_str.c_str(), flow_target);
