esphome:
  name: otgateway
  friendly_name: OpenTherm Gateway

  on_boot:
    priority: -100
    then:
      - lambda: |-
          // Link the local climate entity to Equitherm
          opentherm::Equitherm::id_ch_climate = (esphome::climate::Climate *)&id(ch_climate);

          // -------------------------------------------------------------
          // Link Equitherm number handles
          // -------------------------------------------------------------
          opentherm::Equitherm::eq_fb_gain   = (esphome::number::Number *)&id(eq_fb_gain);
          opentherm::Equitherm::eq_k         = (esphome::number::Number *)&id(eq_k);
          opentherm::Equitherm::eq_n         = (esphome::number::Number *)&id(eq_n);
          opentherm::Equitherm::eq_t         = (esphome::number::Number *)&id(eq_t);

          // -------------------------------------------------------------
          // Boiler & DHW limits
          // -------------------------------------------------------------
          opentherm::Boiler::max_heating_temp = (esphome::number::Number *)&id(max_boiler_temp_heating);
          opentherm::DHW::max_water_temp      = (esphome::number::Number *)&id(max_boiler_temp_water);

          // -------------------------------------------------------------
          // Diagnostics binary sensors
          // -------------------------------------------------------------
          using namespace opentherm::Diagnostics;
          ch_active_sensor      = (esphome::binary_sensor::BinarySensor *)&id(ch_active);
          comms_ok_sensor       = (esphome::binary_sensor::BinarySensor *)&id(comms_ok);
          diagnostic_sensor     = (esphome::binary_sensor::BinarySensor *)&id(boiler_diag);
          dhw_active_sensor     = (esphome::binary_sensor::BinarySensor *)&id(dhw_active);
          dhw_flowing_sensor    = (esphome::binary_sensor::BinarySensor *)&id(dhw_flowing);
          dhw_flow_rate_sensor  = (esphome::sensor::Sensor *)&id(dhw_flow_rate);
          fault_sensor          = (esphome::binary_sensor::BinarySensor *)&id(boiler_fault);
          fault_text_sensor     = (esphome::text_sensor::TextSensor *)&id(fault_text);
          flame_sensor          = (esphome::binary_sensor::BinarySensor *)&id(boiler_flame);

          // -------------------------------------------------------------
          // Emergency and manual override switches
          // -------------------------------------------------------------
          using namespace opentherm::Emergency;
          emergency_switch = (esphome::switch_::Switch *)&id(emergency_mode);
          force_heat_switch = (esphome::switch_::Switch *)&id(force_heat);
          force_dhw_switch  = (esphome::switch_::Switch *)&id(force_dhw);
